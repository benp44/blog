<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering on Unrecognized Escape Sequence</title>
    <link>https://benp44.github.io/blog/tags/software-engineering/</link>
    <description>Recent content in Software Engineering on Unrecognized Escape Sequence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2023 Ben Pring</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 21:21:01 +0000</lastBuildDate>
    
	<atom:link href="https://benp44.github.io/blog/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Putting together a half-decent merge/pull request</title>
      <link>https://benp44.github.io/blog/blog/putting-together-a-half-decent-merge/pull-request/</link>
      <pubDate>Tue, 05 Jan 2021 21:21:01 +0000</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/putting-together-a-half-decent-merge/pull-request/</guid>
      <description>There&amp;rsquo;s a decent case &amp;ndash; for when working on almost any software project &amp;ndash; that you should be doing code reviews for everything that is intended to make it into your main branch. Even if you are working alone, I would recommend making a review process part of your workflow, if only to separate the mental process of writing code from reviewing it.
In larger projects with more developers, yes, automated tests, linters and continuous integration (CI) systems are essential, but I would argue equally so is the quality control gate that is a decent review system.</description>
    </item>
    
    <item>
      <title>Improving your life with pre-commit</title>
      <link>https://benp44.github.io/blog/blog/improving-your-life-with-pre-commit/</link>
      <pubDate>Mon, 01 Jul 2019 20:05:54 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/improving-your-life-with-pre-commit/</guid>
      <description>What is pre-commit and how can it help me? If you&amp;rsquo;re not aware of pre-commit, it&amp;rsquo;s one of a variety of tools that you can use to run a series of tests and checks on your code at the point of committing to git. From the pre-commit site:
 [pre-commit] is a multi-language package manager for pre-commit hooks. You specify a list of hooks you want and pre-commit manages the installation and execution of any hook written in any language before every commit</description>
    </item>
    
    <item>
      <title>A couple of Google Test gotchas</title>
      <link>https://benp44.github.io/blog/blog/a-couple-of-google-test-gotchas/</link>
      <pubDate>Mon, 03 Jun 2019 15:05:19 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/a-couple-of-google-test-gotchas/</guid>
      <description>Testing multiple calls to the same mock method Situation: You want to test that a method of your mocked dependency is called multiple times with different parameters. For example, in the following code snippets we are testing that a method setProperty is called twice from within the method being tested. As we typically want to check only one thing per test, we would have two tests which EXPECT_CALL these calls:</description>
    </item>
    
    <item>
      <title>The backlog refinery</title>
      <link>https://benp44.github.io/blog/blog/the-backlog-refinery/</link>
      <pubDate>Wed, 29 May 2019 08:49:08 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/the-backlog-refinery/</guid>
      <description>tldr  It can be helpful to separate a backlog into multiple sections, stratifying cards into different stages of refinement.
 Cards start as raw, un-edited ideas and bugs in the first section, and proceed up to ready-to-code technical tasks in the last, with intermediate stages.
 This makes it really easy to focus in sprint meetings on the goal at hand: moving cards from one section to the next by &amp;lsquo;refining&amp;rsquo; them.</description>
    </item>
    
    <item>
      <title>Building without designing</title>
      <link>https://benp44.github.io/blog/blog/building-without-designing/</link>
      <pubDate>Sun, 24 Feb 2019 19:52:30 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/building-without-designing/</guid>
      <description>A quick one today, but an important one.
When working at startups and in small development teams, something I&amp;rsquo;ve seen a lot is the dangerous idea that it is possible to write any kind of non-trivial software without having given it some serious thought first.
I suspect this often comes from the classic abuse of the term &amp;ldquo;agile&amp;rdquo; as an excuse to drop some of the less tangibly essential aspects of software development and &amp;ldquo;just smash out some code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Coding styles</title>
      <link>https://benp44.github.io/blog/blog/coding-styles/</link>
      <pubDate>Fri, 20 Jul 2018 20:05:54 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/coding-styles/</guid>
      <description>Coding style 101  Have a coding style and follow it. Consistency is really important for code readability. And this goes for whatever code you&amp;rsquo;re working on - code that can seem throwaway at first may end up being re-used in a production project.
Not sure where to start? Have a look at some coding styles that have been created for you. PEP8 is a good start for Python. Google&amp;rsquo;s C++ style is pretty agreeable.</description>
    </item>
    
    <item>
      <title>Getting started with Google Test</title>
      <link>https://benp44.github.io/blog/blog/getting-started-with-google-test/</link>
      <pubDate>Sun, 03 Jun 2018 15:05:19 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/getting-started-with-google-test/</guid>
      <description>Unit testing in C++ I cut my teeth with TDD working in C# and taking advantage of the variety of really nice unit testing and mocking tools available within the cosy Microsoft playground. But in the last few years I&amp;rsquo;ve found myself working with C++ a lot more, and I really wanted to ensure that the unit testing experience was, as far as possible, as convenient and powerful.
Unit testing can be a little dry at times (what!</description>
    </item>
    
  </channel>
</rss>