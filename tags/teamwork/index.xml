<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teamwork on Unrecognized Escape Sequence</title>
    <link>https://benp44.github.io/blog/tags/teamwork/</link>
    <description>Recent content in Teamwork on Unrecognized Escape Sequence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2023 Ben Pring</copyright>
    <lastBuildDate>Fri, 12 May 2023 15:05:19 +0100</lastBuildDate>
    
	<atom:link href="https://benp44.github.io/blog/tags/teamwork/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Scrum WIP Limits</title>
      <link>https://benp44.github.io/blog/blog/using-scrum-wip-limits/</link>
      <pubDate>Fri, 12 May 2023 15:05:19 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/using-scrum-wip-limits/</guid>
      <description>The TLDR; My team has recently been experimenting with various WIP (work in progress) limits. Actually we brought in the idea maybe a year ago, but I&amp;rsquo;ve only recently had some time to write about it with some hindsight.
You can read on for quite a lot of (possibly uninteresting) detail, but the TLDR is that a WIP limit is a very valuable tool, which I would recommend any established Scrum team give a try.</description>
    </item>
    
    <item>
      <title>Putting together a half-decent merge/pull request</title>
      <link>https://benp44.github.io/blog/blog/putting-together-a-half-decent-merge/pull-request/</link>
      <pubDate>Tue, 05 Jan 2021 21:21:01 +0000</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/putting-together-a-half-decent-merge/pull-request/</guid>
      <description>There&amp;rsquo;s a decent case &amp;ndash; for when working on almost any software project &amp;ndash; that you should be doing code reviews for everything that is intended to make it into your main branch. Even if you are working alone, I would recommend making a review process part of your workflow, if only to separate the mental process of writing code from reviewing it.
In larger projects with more developers, yes, automated tests, linters and continuous integration (CI) systems are essential, but I would argue equally so is the quality control gate that is a decent review system.</description>
    </item>
    
    <item>
      <title>Building without designing</title>
      <link>https://benp44.github.io/blog/blog/building-without-designing/</link>
      <pubDate>Sun, 24 Feb 2019 19:52:30 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/building-without-designing/</guid>
      <description>A quick one today, but an important one.
When working at startups and in small development teams, something I&amp;rsquo;ve seen a lot is the dangerous idea that it is possible to write any kind of non-trivial software without having given it some serious thought first.
I suspect this often comes from the classic abuse of the term &amp;ldquo;agile&amp;rdquo; as an excuse to drop some of the less tangibly essential aspects of software development and &amp;ldquo;just smash out some code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Coding styles</title>
      <link>https://benp44.github.io/blog/blog/coding-styles/</link>
      <pubDate>Fri, 20 Jul 2018 20:05:54 +0100</pubDate>
      
      <guid>https://benp44.github.io/blog/blog/coding-styles/</guid>
      <description>Coding style 101  Have a coding style and follow it. Consistency is really important for code readability. And this goes for whatever code you&amp;rsquo;re working on - code that can seem throwaway at first may end up being re-used in a production project.
Not sure where to start? Have a look at some coding styles that have been created for you. PEP8 is a good start for Python. Google&amp;rsquo;s C++ style is pretty agreeable.</description>
    </item>
    
  </channel>
</rss>